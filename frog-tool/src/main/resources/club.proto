option java_package = "protobuf.clazz";
option java_outer_classname = "ClubMsgProto";
import "basic/common.proto";
//服务器用
message ClubServerProto {
    optional int64 nextRefreshTime = 1;
    optional int32 daily_game_count = 2;
    optional int64 daily_game_cost = 3; // 闲逸豆消耗
    repeated ClubDailyCostProto dailysCost = 6;
    repeated ClubApplyJoinProto agreeMembers = 4; //已经审核通过名单
    repeated ClubApplyJoinProto requestMembers = 5; //待审核名单
    repeated ClubJoinQuitMsgProto joinQuitMsgProto = 7; //俱乐部事件消息
    optional int64 daily_game_exclusive_cost = 8; // 专属豆消耗
    optional int32 daily_welfare_lottery_count = 9; // 福卡抽奖次数
    optional int32 newLotteryAutoTime = 10; //摇奖自动抽取时间 0-关闭自动抽奖(单位分)
    optional int32 tireLastActiveTime = 11; //疲劳值功能上次激活时间
    optional int32 clubWelfareLastActiveTime = 12; //福卡功能上次激活时间
    optional int32 newFuCardLastActiveTime = 13; //奖券功能上次激活时间
    optional int32 daily_welfare_cost = 14; //单日福卡消耗
    optional int32 overTimeKick = 15; //未准备踢出牌桌时间 0-默认 (单位分)
    optional int32 gameTableDisplaySet = 16; //已开局牌桌显示设置 0-全显示 1-全隐藏
    optional int32 showGameTableNumSet = 17; //大厅及亲友圈列表已开局牌桌显示设置 0-默认
}

message ClubRequest {
    required ClubRequestType type = 1;
    optional int32 club_id = 2; // 加入俱乐部 开始牌局 修改玩法 等需要俱乐部id的用
    optional int32 clubRuleId = 3; // 创建房间用
    optional string join_content = 4; // 申请描述
    optional int64 account_id = 5; // 操作的玩家Id
    optional ClubRecordReqProto recordReq = 6; //牌局记录请求
    optional ClubProto creatClub = 7; // 创建俱乐部
    optional ClubUpdateProto clubUpdate = 8; //修改俱乐部
    optional bool isBatch = 9; // 是否批量处理玩家的申请操作
    optional int32 joinId = 10; //GAME-TODO 前两个字节桌子序号，后两个字节座位序号
    optional string field = 11; // [客户端透传字段-请求俱乐部玩法信息，透传给客户端]
    optional ChatMsgReq chatMsg = 12; //聊天请求
    optional ClubMemberRemarkProto remark = 13; //备注
    optional ClubNoticeProto notice = 14; //公告
    optional string groupId = 15; //群id
    optional ClubRuleRemarkProto ruleRemark = 16; //包间备注
    optional int32 status = 17; //通用状态
    optional int32 exitType = 18; // 1-踢出  2-同意退出申请
    optional int32 tablePassport = 19; //包间桌子密码
    optional int64 chatUniqueId = 20; //聊天消息唯一id
    optional int64 partnerId = 21; //合伙人Id
    optional int64 teamPartnerId = 22; //战队小队长Id
    optional int64 thirdTeamPartnerId = 23; //小组长Id
    optional int64 invitorId = 24; //邀请人Id
    enum ClubRequestType {
        CLUB_REQ_LIST = 1; // 列表
        CLUB_REQ_ENTER = 2; // 加入俱乐部
        CLUB_REQ_MEMBER_OUT = 3; // 退出
        CLUB_REQ_CREATE_ROOM = 4; // 创建房间
        CLUB_REQ_RECORD = 5; // 记录
        CLUB_REQ_CREATE_CLUB = 6; // 创建俱乐部
        CLUB_REQ_UPDATE_CLUB = 7; // 修改俱乐部
        CLUB_REQ_CLUB_DETAIL = 8; //俱乐部详情
        CLUB_REQ_KICK = 9; // 踢人
        CLUB_REQ_AGREE = 10; // 同意玩家申请
        CLUB_REQ_REJECT = 11; // 拒绝玩家申请
        CLUB_REQ_DELETE = 12; //解散俱乐部
        CLUB_REQ_RULE_TABLES = 13; //规则对应的桌子列表
        CLUB_REQ_RULE_TABLE_PLAYER_SIZE = 14; //请求当前俱乐部所有规则下对应的人数
        CLUB_REQ_EVENT_MSG = 15; //俱乐部事件
        CLUB_REQ_DISBAND_TABLE = 16; //解散桌子
        CLUB_REQ_RULE_DETAIL = 17; //
        CLUB_REQ_CHAT = 18; //聊天
        CLUB_ONLINE_MEMBERS = 19; //成员在线状态
        CLUB_MEMBER_MARKER = 20; //成员备注
        CLUB_NOTICE = 21; //俱乐部公告设置
        CLUB_CHAT_HISTORY = 22; //俱乐部聊天记录
        CLUB_HONOUR_RECORD = 23; //
        CLUB_TO_GROUP = 24; //俱乐部成员同步到微信群
        GROUP_TO_CLUB = 25; //微信成员同步到俱乐部
        GROUP_REQ_LIST = 26; //我的微信群列表
        GROUP_MEMBER = 27; //微信群成员
        BIND_GROUP = 28; //绑定微信群
        UNBIND_GROUP = 29; //解绑微信群
        CLUB_FAST_JOIN = 30; //俱乐部快速加入
        CLUB_GROUP_INFO = 31; //俱乐部绑定的微信群
        GROUP_MEMBER_JOIN_CLUB = 32; //俱乐部添加微信群成员
        CLUB_TODAY_RECORD = 33; //俱乐部当日局数和扣逗数
        CLUB_RULE_MARKER = 34; //玩法/包间备注
        CLUB_ADD_MEMBER = 35; //俱乐部添加成员
        CLUB_SET_MANAGER = 36; //添加/设置管理员
        CLUB_DEFRIEND = 37; //拉黑
        CLUB_MEMBER_LIST = 38; //俱乐部成员列表
        CLUB_KICK_PLAYER = 39; //踢桌子内玩家
    }

}

message ClubRecordReqProto {
    optional int64 target_account_id = 1;
    required int32 clubId = 2;
    optional int32 page = 3;
    optional int64 begin_time = 4;
    optional int64 end_time = 5;
    optional int32 ruleId = 6;
    optional int32 totalSize = 7;	//透传战绩总记录数
    optional int64 partnerId = 8; //合伙人Id
    optional int32 onlyNotUpvote = 9; // 0-全部 1-只未点赞的
}

//修改游戏玩法用
message ClubUpdateProto {
    required int32 type = 1; //1修改描述 2.修改玩法 3.添加玩法 4.删除玩法 5.俱乐部名 6.设置俱乐部状态 7.设置玩法状态 8.设置俱乐部复选框类开关状态
    required int32 club_id = 2;
    optional string desc = 3;
    repeated ClubRuleProto clubRule = 4; // 游戏玩法
    optional string club_name = 5;
    repeated CommonII setStatus = 6; //设置
    repeated CommonII checkboxSetStatus = 7; //复选框类开关设置(防止上面开关设置位不够用了,再扩展一个字段)
}

// 俱乐部数据  获取详情才会下发申请列表 和成员列表
message ClubProto {
    optional int32 club_id = 1;
    optional int32 club_count = 2; // 俱乐部人数
    optional string club_name = 3; // 俱乐部名
    optional int64 account_id = 4; // 管理员Id
    optional string avatar = 5; // 管理员头像
    optional string desc = 6; //俱乐部描述
    optional int64 create_at = 9; //创建时间
    repeated ClubRuleProto clubRule = 7; // 游戏玩法
    repeated ClubDailyCostProto dailyCosts = 8; //
    repeated ClubAccountProto memebers = 10; //俱乐部成员
    repeated ClubApplyJoinProto applyList = 11; //申请列表
    repeated ClubApplyJoinProto agreeList = 12; //已审核列表
    repeated CommonII setStatus = 13; //俱乐部相关设置
    optional string owenerName = 14; //俱乐部群主
    optional string clubNotice = 15; //俱乐部公告
    optional int32 playingTableCount = 16;
    repeated GroupMembers groupMembersList = 17; //微信群成员列表
    repeated WxGroups wxGroupsList = 18; //微信群列表
    optional int32 hasAssistant = 19; //是否开通闲逸助手0开通，1未开通
    optional int32 reqAccountIdentity = 20; //请求者的身份
    repeated ClubApplyExitProto applyExitList = 21; //退出申请列表
    optional bool isPartner = 22; //是否合伙人
    optional int32 multiRuleTableNum = 23; //多包间模式下新增闲置桌子数
    optional int32 upvoteCostTireValue = 24; //点赞消耗 (已废弃)
    optional bool isOpenUpvoteCostTire = 25 ; //是否打开点赞消耗疲劳值开关
    repeated CommonII checkboxSetStatus = 26; //俱乐部复选框类开关相关设置
    optional int32 onlineCount = 27; //亲友圈在线人数
    optional bool partnerWelfareStatus = 28; //合伙人福卡开关状态
    optional bool partnerTireStatus = 29; //合伙人疲劳值开关状态
    optional bool clubRankSwitch = 30; //冲榜赛功能开关
    optional bool partnerRankStatus = 31; //合伙人冲榜赛开关状态
    optional int32 ruleMaxNum = 32; // 亲友圈最大包间数
    optional bool bigWinSetSwitch = 33; //亲友圈大赢家设置开关
    optional int32 partnerStatus = 34; //1-亲友圈合伙人 2-战队合伙人
    optional bool clubRankContributionSwitch = 35; //亲友圈冲榜贡献开关
//    optional string multiRuleGroup = 36; //多包间混合配置
//    optional int32 multiRuleFreeTablePosition = 37; //1空桌在前2在后
//    optional int32 multiRuleCategory = 38; //0但玩法，1多玩法，2混合多玩法
    optional ClubMultiRuleGroupSetProto multiRuleSet = 36;
    optional bool clubRankJudgeSwitch = 37; //冲榜裁判开关
    optional int32 gameTableDisplaySet = 38; //已开局牌桌显示 0-全显 1-全隐
    optional bool clubLeagueSwitch = 39; //亲友圈大联盟返利开关
    optional int32 showGameTableNumSet = 40; // 大厅及亲友圈列表已开局牌桌显示设置 0-默认
    optional bool fourthFifthTeamSwitch = 41; //四五级队长总开关
    optional string fourthFifthSwitchDetail = 42; //四五级开关勾选详情
    optional bool recoverableMemberStatus = 43; //是否有可恢复列表
    optional int32 teamLeaderLimitRankScore = 44; //牌局中的队长可进行管理的比赛分设置
    optional bool clubGameMatchSwitch = 45; //亲友圈匹配入桌开关
}

//微信群成员
message GroupMembers {
    optional int32 isJoinInClub = 1; // 是否在俱乐部中，0不在，1在
    optional string nick = 2; // 昵称
    optional string headPic = 3; // 头像
    optional int64 account_id = 4; // Id
}

message WxGroups {
    optional int32 groupMemberNum = 1; // 成员数
    optional string groupName = 2; // 群名称
    optional string groupId = 3; // 群id
}

message ClubTodayCostProto {
    optional int32 clubId = 1;
    optional int32 daily_count = 2; // 当日开房数
    optional int64 daily_gold = 3; // 当日消耗闲逸豆数
    optional int32 daily_welfare_lottery_count = 4; //当日福卡抽奖次数
}

message ClubDailyCostProto {
    optional int64 create_at = 1; //时间戳 (-1代表全部)
    optional int32 daily_count = 2; // 当日开房数
    optional int64 daily_gold = 3; // 当日消耗闲逸豆数
    optional int64 daily_exclusive_gold = 4; //当日消耗专属豆
    optional int32 daily_welfare_lottery_count = 5; //当日福卡抽奖数
    optional int32 daily_welfare_cost = 6; //当日福卡消耗数
}

// 俱乐部玩法
message ClubRuleProto {
    optional int32 id = 1; // 唯一Id
    optional int32 gameType = 2; //游戏大类型
    optional int32 game_type_index = 3; //游戏id
    optional string gameName = 4; //游戏名字
    optional string rule_desc = 5; //玩法描述
    optional CommonGameRulesProto rules = 6;
    optional int32 game_round = 12;
    optional int32 app_id = 7;
    optional string subName = 13; //小类型游戏名称，如看四张
    repeated CommonII setStatus = 14; //俱乐部玩法相关设置 @see ERuleSettingStatus 1.疲劳值开关 2.局数限制开关
    optional string remark = 15; //备注，如果有就填
    optional int32 tireValue = 16; //包间疲劳值门槛
    optional int32 limitGameRound = 17; //限制的局数
    optional int32 tableMaxPlayer = 18; //桌子最大人数
    optional int32 showType = 19; //客户端展示用 0-局数 1-积分(废弃)
    optional int32 lotteryCost = 20; //大赢家抽奖消耗
    optional int32 limitWelfare = 21; //福卡入桌门槛
    optional int32 welfareCostType = 22; //福卡消耗类型 1-大赢家抽奖 2-所有人抽奖
    optional int32 allPeopleCost = 23; //福卡所有人抽奖消耗
    repeated WelfareBigWinCost bigWinCost = 24; // 福卡大赢家抽奖消耗
    optional int32 scoreTireRate = 25; // 积分换算疲劳值倍率
    optional int32 tireExtraCostType = 26; // 疲劳值额外扣除(1-大赢家额外扣除 2-所有人额外扣除)
    repeated TireBigWinCost tireBigWinCost = 27; // 疲劳值大赢家额外扣除
    optional int32 tireAllPeopleCost = 28; // 疲劳值所有人额外扣除值
    optional string gameDesc = 29; // 包间游戏描述(客户端展示用) 格式:type:num type1-分数 2-圈数
    optional double rankScoreLimit = 30; //冲榜分门槛值
    optional int32 rankScoreCostType = 31;//冲榜分扣除类型 1-大赢家 2-所有人
    repeated NewCommonCost rankScoreBigWinCost = 32;//冲榜分大赢家扣除
    optional double rankScoreAllCost = 33; //冲榜分所有人扣除
    optional int32 bigWinScore = 34; //有效大赢家设置分
    optional int32 teamAllotType = 35; //贡献分配类型 0-默认值 1-大赢家 2-参与人
    optional double allPeopleBigWin = 36; //所有人扣除时大赢家门槛
    optional int32 freezeState = 37; //冻结状态
    optional int32 vipStatus = 38; // 是否vip包间 0-否 1-是
    optional int32 vipPlayerNum = 39; //vip成员人数
    optional string ruleStyle = 40; //包间样式
    optional double limitCostScore = 41; //新总消耗分贡献分配门槛
}

message TireBigWinCost {
    optional int32 minValue = 1;
    optional int32 maxValue = 2;
    optional int32 cost = 3;
}

message WelfareBigWinCost {
    optional int32 minValue = 1;
    optional int32 maxValue = 2;
    optional int32 cost = 3;
}

// 俱乐部成员
message ClubAccountProto {
    optional int64 account_id = 1; // 唯一Id
    optional string avatar = 2; //游戏大类型
    optional int64 join_time = 3; //加入时间
    optional int32 game_time = 4; //局数
    optional int32 win_time = 5; // 大赢家次数
    optional string nickname = 6;
    optional string remark = 7; //备注
    optional string remark_ext = 8; //第二个备注
    optional int32 identity = 9; //-1黑名单 0普通成员 1管理员 2创始人
    optional int32 online = 10; //0离线， 1在线
    optional int32 isPartner = 11; // 1-亲友圈合伙人 2-战队合伙人
    optional int64 parentId = 12; //
    optional int64 playerClubWelfare = 13; //玩家亲友圈福卡数量
    optional int32 tireValue = 14; //玩家当日疲劳值
    optional int32 curGameCount = 15; //玩家当日局数
    optional int32 curWinCount = 16; //玩家当日大赢家数
    optional int64 newFuCard = 17; //玩家新福卡数量
    optional double curRankScore = 18; //冲榜分
    optional int64 teamParentId = 19; //战队合伙人(战队小队长)
    optional int64 thirdTeamParentId = 20; //小组长
    optional int32 sysRMTime = 21; //被系统移出的时间
    optional string str1 = 22; //备用字段
}
//申请 和已审核公用
message ClubApplyJoinProto {
    optional int64 account_id = 1; // 用户id
    optional string avatar = 2; // 头像
    optional int64 join_time = 3; //申请时间
    optional string nickname = 4; //昵称
    optional string content = 5; //申请描述
    optional int64 create_time = 6; // 创建时间
    optional bool isAgree = 7; //已审核列表用。true 表示同意  。false表示拒绝
    optional int64 partnerId = 8; //邀请玩家的合伙人Id
    optional int64 teamPartnerId = 9; //邀请玩家的战队小队长Id
    optional int64 thirdTeamPartnerId = 10; //邀请玩家的小组长Id
    optional int64 invitorId = 11; //邀请人Id
}

// 退出俱乐部申请 和已审核公用
message ClubApplyExitProto {
    optional int64 account_id = 1; // 用户id
    optional string avatar = 2; // 头像
    optional int64 apply_time = 3; //申请时间
    optional string nickname = 4; //昵称
    optional int64 create_time = 5; // 创建时间
    optional int32 tireValue = 6; // 疲劳值
    optional double rankScore = 7; //冲榜分
}

//俱乐部加入，退出消息
message ClubJoinQuitMsgProto {
    enum MsgType {
        JOIN = 0; //加入
        QUIT = 1; //离开
        CREATE = 2; //创建
        SET_MANAGER = 3; //设置管理员
        SET_DEFRIEND = 4; //拉黑
        CANCEL_DEFRIEND = 5; //取消拉黑;
        FREEZE = 6; //冻结
        UNFREEZE = 7; //取消冻结
        MODIFY_RULE = 8; //修改玩法
        ADD_PARTNER = 9; //添加合伙人
        DEL_PARTNER = 10; //删除合伙人
        ADD_CHILD = 11; //添加合伙人成员
        DEL_CHILD = 12; //删除合伙人成员
        MODIFY_MEM_WELFARE = 13; //修改成员福卡
        AREA_PROTECT = 14; //后台操作区域保护游戏权限
        PARTNER_INVITE_JOIN = 15; //亲友圈合伙人邀请加入
        UPDATE_RULE_VIP_STATUS = 16; //改变包间vip状态
        COPY_CLUB_TEAM = 17; //复制战队
    }

    required MsgType msgType = 1;
    required int64 accountId = 2;
    optional string userName = 3;
    optional int32 operateTime = 4; //单位s
    optional int32 clubId = 5;
    optional int64 operatorId = 6; //操作者id
    optional string operatorName = 7; //操作者名称
    optional int64 partnerId = 8; //合伙人Id
    optional string partnerName = 9; //合伙人名称
    optional int32 tireValue = 10; //疲劳值
    optional int64 playerClubWelfare = 11; //玩家亲友圈福卡
    optional int64 param1 = 12; //通用参数1
    optional int64 param2 = 13; //通用参数2
    optional string paramStr1 = 14; //通用string参数1
    optional int64 param3 = 15; //通用参数3
    optional int64 param4 = 16; //通用参数4
    optional bool isAddMember = 17; //是否添加成员
    optional int32 rankScore = 18; //亲友圈冲榜分
    optional int32 opeType = 19; //1-邀请加入
    optional double newRankScore = 20; //亲友圈冲榜分(支持小数)
}
//1规则对应的桌子
message ClubRuleTableGroupProto {
    required int32 clubId = 1;
    optional int32 ruleId = 2;
    optional int32 maxPlayer = 3;
    repeated ClubTableProto clubTables = 4;
}

message ClubRuleTableProto {
    repeated ClubRuleTableGroupProto ruleTables = 1;
    optional int32 totalPackageCount = 2; // 总包数
    optional int32 packageIndex = 3; // 包序号
}

//2俱乐部桌子
message ClubTableProto {
    required int32 index = 1;
    optional int32 roomId = 2;
    optional int32 curRound = 3;
    optional int32 allowJoinHalfWay = 4;
    repeated ClubTablePlayerProto players = 5;
    optional int32 minPlayerCount = 6; //最小开局人数
    optional bool isDefaultReady = 7; //是否默认准备的房间
    optional bool isShow = 8; //是否在展示中(隐藏桌子设置时有用)
    optional bool isHavePassport = 9; //桌子是否有密码
    optional int32 beginTime = 10;
    optional int32 specialRoundType = 11;//1-倒
    optional int32 curSpecialRound = 12;
}

//3房间的玩家
message ClubTablePlayerProto {
    optional int64 account_id = 1; //账号id
    optional string user_name = 2; //角色名
    optional string head_img_url = 3; //玩家头像
    optional int32 seat_index = 4; //玩家位置索引
    optional string ip = 5; //玩家IP
    optional int32 online = 6; //1在线0断线
    optional int32 sex = 7;
    optional bool ready = 8; //0没准备,1准备
    optional bool is_trustee = 9; //true托管 false 取消
    optional int64 money = 10; //金币
    optional int64 gold = 11; //闲逸豆
    optional int32 clubJoinId = 12;
    optional float score = 13; //结束了带上
}

//俱乐部桌子发生状态变更
message ClubTableStatusUpdateRsp {
    required int32 type = 1; //see ERoomStatus
    required int32 clubId = 2;
    required int32 ruleId = 3;
    required int32 index = 4;
    optional int32 roomId = 5;
    optional int32 roomStatus = 6;
    optional int32 curRound = 7;
    optional ClubTablePlayerProto player = 8;
    repeated ClubTablePlayerProto players = 9; //如果涉及到多个玩家，放到这里
    optional int32 minPlayerCount = 10; //最小人数
    optional int32 beginTime = 11;
    optional int32 specialRoundType = 12;
    optional int32 curSpecialRound = 13;
}

//俱乐部规则下的玩家数量
message ClubRuleOnSitRsp {
    required int32 clubId = 1;
    repeated CommonIII ruleIdAndSize = 2;
}

//俱乐部事件消息通知
message ClubEventMsgRsp {
    required int32 clubId = 1;
    repeated ClubJoinQuitMsgProto eventMsgs = 2;
}

//俱乐部操作通知
message ClubOperateEventRsp {
    required int32 clubId = 1;
    required int32 ruleId = 2;
    optional int32 category = 3; //@see EClubOperateCategory 新增玩法 2删除玩法 3修改玩法  4删除俱乐部
}

//俱乐部红心
message ClubRedHeartRsp {
    required int32 clubId = 1;
    required int32 type = 2;
}

//有人请求推送
message ClubReqRsp {
    required int32 clubId = 1;
    optional int32 reqType = 2; //1-加入 2-退出
    repeated ClubApplyJoinProto applyList = 3; //申请加入列表
    repeated ClubApplyExitProto exitList = 4; //申请退出列表
}

message OperateRsp {
    required int32 result = 1; //操作状态
    optional string msg = 2; //操作信息
}
//加入俱乐部结果，发生在管理员操作同意/拒绝
message ClubJoinResultRsp {
    required int32 clubId = 1;
    required string clubName = 2;
    required int32 result = 3; //1同意 2拒绝 3提出
    optional int64 targetAccountId = 4; //目标玩家
    optional int64 operatorAccountId = 5; //操作者
}

//俱乐部聊天广播54
message ClubChatRsp {
    required int32 clubId = 1;
    required string clubName = 2;
    optional ChatMsgRsp chatRsp = 3; //聊天回复
}

message ClubOnlineMemeberRsp {
    required int32 clubId = 1;
    repeated CommonLI memberOnlineStatus = 2; //帐号id ,上线时间(1在线  ,other离线)
}

//备注
message ClubMemberRemarkProto {
    required int64 accountId = 1; //成员信息
    optional string remark = 2; //备注
    optional string remarkExt = 3; //备注拓展
    optional int32 clubId = 4; //俱乐部id 返回时需要
}

//备注
message ClubRuleRemarkProto {
    required string remark = 1; //备注
    optional int32 clubId = 2; //俱乐部id 返回时需要
    optional int32 ruleId = 3;
}

//公告设置,请求填text即可，返回clubId也会填置
message ClubNoticeProto {
    required string text = 1;
    optional int32 clubId = 2;
}

//聊天记录
message ClubChatHistory {
    required int32 clubId = 1;
    repeated ChatMsgRsp chatHistory = 2;
}

//俱乐部桌子结算快照
message ClubGameOverSnapshotProto {
    required int32 clubId = 1;
    required int32 ruleId = 2;
    optional ClubTableProto clubTable = 3;
    optional string brandId = 4; //牌局id，用于和战绩做映射
    optional int32 createTime = 5; //牌局开始时间
    optional int32 tableImageId = 6; //镜像ID
}

//荣耀-战绩相关
message HonourRecordProto {
    required int32 clubId = 1;
    repeated CommonLI winRecords = 2; //大赢家
    repeated CommonLI timeRecords = 3; //次数
}

//精简版俱乐部信息，不包含玩法
message ClubSimple {
    repeated ClubProto clubs = 1;
}

//专属豆
message ClubExclusiveGoldProto {
    required int64 accountId = 1; //拥有者
    repeated CommonILI exclusive = 2; //专属豆[账号]详情，k:gameid ,v1:数量 ，v2:过期时间
}

//专属豆活动有更新
message ClubExclusiveActivityUpdateProto {
    repeated int32 gameIds = 1; //子游戏id
}

//通用
message ClubCommonLIIProto {
    optional int32 clubId = 1;
    optional int32 ruleId = 2;
    optional CommonLII common = 3;
}

message ClubCommonIIsProto {
    optional int32 clubId = 1;
    optional int32 ruleId = 2;
    repeated CommonII common = 3;
    repeated CommonII checkboxCommon = 4;
}

//有人加入俱乐部,推送这个人的信息给操作者
message ClubMemberJoinProto {
    optional int32 clubId = 1;
    optional ClubAccountProto member = 2;
}

message ClubCreatorGoldUpdateProto {
    optional int64 accountId = 1;
    optional int32 category = 2; //@see EWealthCategory
    optional int64 value = 3; //
    optional int32 clubId = 4;
}

//身份操作
message ClubIdentityUpdateProto {
    required int32 clubId = 1;
    optional int64 accountId = 2;
    optional int32 identity = 3; //新身份
}

//俱乐部成员列表
message ClubMemberListProto {
    required int32 clubId = 1;
    repeated ClubAccountProto memebers = 2; //俱乐部成员
}

message ClubCommon {
    optional int32 clubId = 1;
    optional int32 ruleId = 2;
    optional int32 joinId = 3;
    optional int64 targetId = 4; // 被操作玩家Id
    optional int32 param1 = 5;
    optional string brandId = 6; //牌局Id
    optional int64 paramLong1 = 7;//通用参数
    repeated int64 paramList1 = 8; //通用参数
    optional int32 param2 = 9;
    optional string paramStr = 10; //通用参数
    optional int32 param3 = 11;
    repeated int32 paramIntList1 = 12; //通用参数
    optional int32 param4 = 13;
    optional double param5 = 14;
    optional double param6 = 15;
}

//请求俱乐部基本信息
message ClubActivityMiniInfoReqProto {
    required int32 clubId = 1;
}

//请求俱乐部活动信息[请求]
message ClubActivityInfoReqProto {
    required int32 clubId = 1;
    repeated int64 activityIds = 2; //传活动id获取对应的活动信息，不填请求全部活动
}

//请求俱乐部活动信息[返回]
message ClubActivityListProto {
    required int32 clubId = 1;
    repeated ClubActivityProto acts = 2;
}

//创建活动[请求]
message ClubCreateActProto {
    required ClubActivityProto act = 1;
}

//删除活动[请求]
message ClubDelActProto {
    required int32 clubId = 2;
    required int64 activityId = 1;
}

//活动排行榜信息[请求]
message ClubActRankProto {
    required int32 clubId = 2;
    required int64 activityId = 1;
}

//活动排行榜信息[返回]
message ClubActivityRankProto {
    required int32 clubId = 1;
    optional int64 activityId = 2;
    repeated CommonRankInfoProto rankInfo = 3;
}

//俱乐部活动
message ClubActivityProto {
    required int32 clubId = 1; //俱乐部id
    optional string activityName = 2; //活动名称
    optional int32 activityType = 3; //排名类型
    required int32 startDate = 4; //起始时间
    required int32 endDate = 5; //结束时间
    optional int64 creatorId = 6; //发起者
    optional int64 activityId = 7; //活动id
    optional int32 rankLimit = 8; //排行榜人数
    optional string remark = 9; //备注
    optional int32 gameTypeIndex = 10; //子玩法ID
    optional string subGameName = 11; //子玩法名称
    optional int32 category = 12; //类别
    optional int32 settings = 13; //1管理员可见
    optional string expand = 14; //拓展字段
    optional int32 surplusAllLotteryTimes = 15; //剩余总次数
    optional int32 surplusSelfLotteryTimes = 16; //请求者剩余总次数
    repeated int32 ruleIds = 17; //可选包间ID
}

//活动时间推送
message ClubActivityEventNotify {
    required int32 clubId = 1;
    optional int64 activityId = 2;
    optional int64 operatorId = 3;
    optional int32 eventCode = 4; //1创建2删除3开始4结束
}

//俱乐部转让
message ClubAssignmentProto {
    required int32 clubId = 1;
    optional int64 targetAccountId = 2;
    optional PhoneReqProto phoneInfo = 3;
}

//俱乐部成员头像请求
message ClubMemberAvatarReq {
    required int32 clubId = 1;
    repeated int64 accountIds = 2;
}
//俱乐部成员头像返回
message ClubMemberAvatarRsp {
    required int32 clubId = 1;
    repeated CommonLS avatars = 2;
}

//邀请
message ClubInviteJoinTableProto {
    required ClubCommon clubCommon = 1;
    optional ClubAccountProto account = 2; //请求：被邀请者id ，  反回：邀请者id
}

//拒绝被邀请
message ClubIgnoreInviteProto {
    required int32 clubId = 1;
    optional int64 targetAccountId = 2;
    optional int32 time = 3; //备用字段
    optional int32 type = 4; //1-牌桌邀请 2-添加合伙人 3-删除合伙人 4-合伙人邀请加入
}

//俱乐部公告
message ClubBulletinProto {
    optional int64 id = 1;
    optional int32 clubId = 2;
    optional int64 creator = 3;
    optional int32 startDate = 4;
    optional int32 endDate = 5;
    optional string text = 6;
    optional int32 category = 7; //1系统 2俱乐部 3单次跑马灯
    optional int32 status = 8; //状态1开始，0暂停
}

message ClubSetBulletinProto {
    required int32 clubId = 1;
    optional int32 type = 2; //1创建 2更新公告内容 3开启  4暂停
    optional ClubBulletinProto bulletin = 3;
}
//俱乐部公告消息
message ClubBulletinInfoReqProto {
    required int32 clubId = 1;
    repeated int64 bulletinIds = 2;
}

message ClubBulletinInfoRspProto {
    required int32 clubId = 1;
    repeated ClubBulletinProto bulletins = 2;
}

//活动时间推送
message ClubBulletinEventNotify {
    required int32 clubId = 1;
    optional int64 bulletinId = 2;
    optional int64 operatorId = 3;
    optional int32 eventCode = 4; //1创建 2更新公告内容 3开启  4暂停
}

//俱乐部场景标记
message ClubSceneTagProto {
    required int32 category = 1; //1俱乐部列表 2俱乐部内部   3离开
    optional ClubCommon scene = 2; //场景，离开不需要
}

//请求包间在线人数数据[req]
message ClubRuleOLMemberReqProto {
    required int32 clubId = 1;
    repeated int32 ruleId = 2; // 不传请求全部
    optional bool hideStartTable = 3;
}

//俱乐部包间在线玩家
message ClubRuleOLMemberProto {
    required int32 ruleId = 1;
    repeated ClubAccountProto members = 2;
}

//各个包间的数据[rsp]
message ClubRuleOLMemberListProto {
    required int32 clubId = 1;
    repeated ClubRuleOLMemberProto ruleOLMembers = 2; //只是在线，但不在桌子的成员
    repeated ClubRuleTableGroupProto ruleTables = 3; //所有包间的桌子数据，精简玩家数据
}

// 修改俱乐部成员记录,cmd508
message ClubMemberRecordModifyProto {
    optional int32 clubId = 1;
    optional int64 accountId = 2;
    optional int32 requestType = 3; //请求类型 1-今天 2-昨天 3-前天 4-第四天 5-第五天 6-第六天 7-第七天
    optional int32 opType = 4; //操作类型 1-修改疲劳值 2-点赞 3-设置点赞数
    optional int32 tireValue = 5; //修改后的疲劳值
    repeated int64 targetIds = 6; // 修改的玩家列表(新需求批量修改) (废弃)
    optional int32 clientCurTireValue = 7; //客户端当前疲劳值用于校验(修改单个玩家时)
    repeated TargetTireProto targetTire = 8; //修改的玩家列表
    optional int32 likeNum = 9; //设置的点赞数
    optional int32 tireChangeValue = 10; //疲劳值修改值(修改疲劳值的操作变化了)
}

message TargetTireProto {
    optional int64 accountId = 1;
    optional int32 clientCurTireValue = 2; //客户端当前疲劳值用于校验
}

// 修改俱乐部成员记录返回,cmd506
message ClubMemberRecordModifyResponse {
    optional int32 clubId = 1;
    optional int64 accountId = 2;
    optional int32 requestType = 3; //请求类型 1-今天 2-昨天 3-前天 4-第四天 5-第五天 6-第六天 7-第七天
    optional int32 opType = 4; //操作类型 1-修改疲劳值 2-点赞
    optional int32 isLike = 5; //点心状态 0-否 1-是
    optional int32 tireValue = 6; //修改后的疲劳值
    optional int32 ret = 7; // 错误码 1-客户端待修改疲劳值和当前服务器疲劳值不一致
    optional int32 likeNum = 8; // 点赞数
    repeated PlayerTireProto playerTires = 9; //玩家疲劳值
    optional int64 operateId = 10; // 操作人Id
}

message PlayerTireProto {
    optional int64 accountId = 1;
    optional int32 tireValue = 2;
}


// 俱乐部成员记录请求,cmd509
message ClubMemberRecordRequestProto {
    optional int32 clubId = 1;
    optional int32 requestType = 2; //请求类型 1-今天 2-昨天 3-前天 4-第四天 5-第五天 6-第六天 7-第七天 8-第八天 21-八天 31-全部 100-跨时间段查询
    optional int64 accountId = 3; //请求单个玩家的记录
    optional int64 startTime = 4; //查询起始时间
    optional int64 endTime = 5; //查询结束时间
}

// 俱乐部玩家记录返回,cmd507
message ClubMemberRecordResponse {
    optional int32 clubId = 1;
    repeated ClubMemberRecord record = 2; //玩家记录
    optional int32 requestType = 3; //请求类型 1-今天 2-昨天 3-前天 4-第四天 5-第五天 6-第六天 7-第七天 8-第八天 21-八天 31-全部 100-跨时间段查询
    optional int64 accountId = 4; //请求人的Id
    optional int64 targetAccountId = 5; //被请求人的Id
    optional int64 startTime = 6; //查询起始时间
    optional int64 endTime = 7; //查询结束时间
}

message ClubMemberRecord {
    optional int64 accountId = 1;
    optional int32 game_time = 2; //牌局数
    optional int32 win_time = 3; //大赢家数
    optional int32 tireValue = 4; //疲劳值
    optional int32 isLike = 5; //点心状态 0-否 1-是
    optional int32 likeNum = 6; //点赞数
    optional double score = 7; //分数
    optional int32 welfareLotteryCount = 8; //福卡抽奖次数
    optional int32 memberNewFuCardCost = 9; //奖券摇奖消耗数
    optional int32 clubCard = 10; //亲友卡
}

// 俱乐部修改疲劳值记录请求,cmd510
message ClubModifyTireMsgRequestProto {
    optional int32 clubId = 1;
    optional int64 accountId = 2; //请求单个玩家的记录
}

// 俱乐部修改疲劳值记录返回,cmd508
message ClubModifyTireMsgResponse {
    optional int32 clubId = 1;
    repeated ClubModifyTireMsgProto msgs = 2;
    optional int32 type = 3; //1-请求返回 2-主动推送
}

message ClubModifyTireMsgProto {
    optional int64 ope_accountId = 1; //操作者id
    optional string ope_nickname = 2; //操作者名字
    optional int64 target_accountId = 3; //被修改玩家Id
    optional string target_nickname = 4; //被修改玩家名字
    optional int32 oldValue = 5; //旧值
    optional int32 newValue = 6; //新值
    optional int64 time = 7; //操作时间
    optional int64 recordTime = 8; //记录时间
    optional int32 msgType = 9; //消息类型 0-修改疲劳值消息  2-亲友圈疲劳值开关操作记录
    optional int32 switchStatus = 10; //亲友圈疲劳值开关 1-打开 2-关闭
    optional string subName = 11; //子游戏名称
    optional int32 costNewFuCard = 12 ; //消耗奖券
    optional int32 lotteryNum = 13; //新抽奖次数
    optional int64 relateAccountId = 14;//被关联修改的成员(target是合伙人时对应实际被修改疲劳值的玩家,target是实际被修改疲劳值的玩家时对应该玩家的合伙人)
    optional string relateAccountName = 15;
    optional int32 relateOldValue = 16;
    optional int32 relateNewValue = 17;
    optional bool belongToPartner = 18; // 属于合伙人的关联修改记录,客户端展示的时候需要调换下target和relate
    optional bool isDisbandPartner = 19; //是否解除下属与合伙人关系
}

// 俱乐部退出申请拒绝操作返回,cmd510
message ClubApplyQuitRejectResponse {
    optional bool isSuccess = 1;
    optional int32 clubId = 2;
    optional int64 targetId = 3;
}

// 亲友圈桌子设置密码,cmd513
message ClubTableSetPassportProto {
    optional int32 clubId = 1;
    optional int32 ruleId = 2;
    optional int32 tableIndex = 3;
    optional bool isSet = 4;
    optional int32 passport = 5;
}

// 亲友圈桌子需要密码,cmd511
message ClubTableNeedPassportResponse {
    optional int32 clubId = 1;
    optional int32 ruleId = 2;
    optional int32 tableIndex = 3;
}

// 亲友圈禁止同桌,cmd514
message ClubSetBanPlayerProtoReq {
    optional int32 clubId = 1;
    optional int64 accountId = 2;
    repeated int64 targetAccounts = 3;
}

// 玩家禁止同桌的玩家列表,cmd515
message ClubBanPlayerListReq {
    optional int32 clubId = 1;
    optional int64 accountId = 2;
}

// 玩家禁止同桌的玩家列表,cmd512
message ClubBanPlayerListResponse {
    optional int32 clubId = 1;
    optional int64 accountId = 2;
    repeated int64 banAccounts = 3;
}

// 俱乐部聊天消息唯一Id返回,cmd513
message ClubChatUniqueIdResponse {
    optional int32 clubId = 1;
    optional int64 uniqueId = 2; //聊天消息唯一Id
}

// 亲友圈设置桌子密码返回,cmd514
message ClubSetTablePassportResponse {
    optional int32 clubId = 1;
    optional int32 ruleId = 2;
    optional int32 tableIndex = 3;
    optional bool passportStatus = 4; // 桌子密码状态
}

// 批量修改俱乐部成员疲劳值返回,cmd515
message ClubMemberRecordBatchModifyResponse {
    optional int32 clubId = 1;
    repeated int64 accountIds = 2;
    optional int32 requestType = 3; //请求类型 1-今天 2-昨天 3-前天 4-第四天 5-第五天 6-第六天 7-第七天
    optional int32 tireValue = 4; //修改后的疲劳值
    repeated int64 failedAccountIds = 5; //客户端待修改疲劳值和当前服务器疲劳值不一致的玩家列表
    repeated PlayerTireProto playerTires = 6; //玩家疲劳值
}

// 设置俱乐部玩家限制局数,cmd517
message ClubSetPlayerLimitRoundProtoReq {
    optional int32 clubId = 1;
    optional int32 ruleId = 2;
    optional int32 value = 3;
    repeated int64 accountIds = 4;
}

// 俱乐部玩家限制局数数据返回,cmd516
message ClubPlayerLimitRoundDataResponse {
    optional int32 clubId = 1;
    optional int32 ruleId = 2;
    repeated LimitRoundData data = 3;
}

message LimitRoundData {
    optional int64 accountId = 1;
    optional int32 value = 2;
}

// 俱乐部玩家剩余限制局数返回,cmd517
message ClubPlayerLeftLimitRoundResponse {
    optional int32 clubId = 1;
    optional int32 ruleId = 2;
    optional int32 leftRound = 3; //剩余局数
}

//俱乐部比赛数据
message ClubMatchInfoProto {
    optional int64 id = 1;
    optional int32 clubId = 2;
    optional string matchName = 3;
    optional int32 matchType = 4; //1-自主报名 2-管理员设置
    optional int32 maxPlayerCount = 5;
    optional int32 startDate = 6;
    optional int32 endDate = 7;
    optional int64 creatorId = 8;
    optional int32 status = 9;
    repeated int64 enrollAccountIds = 10;
    repeated CommonII rewards = 11;
    optional ClubRuleProto rule = 12;
    optional int32 opType = 13; // 1-创建 2-删除 3-修改
    optional int32 costGold = 14; //扣豆数
    optional int32 openMatchType = 15; // 开赛类型 0-定时开赛 1-满人开赛
    optional int32 attendCondition = 16; //参赛条件 0-无 1-疲劳值门槛
    optional int32 conditionValue = 17; // 参赛条件值
    optional int32 minPlayerCount = 18; //最小开赛人数
    optional bool isBanEnroll = 19; //是否关闭报名入口
    repeated int64 banPlayerIds = 20; //禁止报名的玩家
}

//亲友圈比赛操作结果返回,cmd521
message ClubMatchOperateResultResponse {
    optional int32 clubId = 1;
    optional int32 opType = 2; // 1-创建 2-删除
    optional bool isSuccess = 3;
    optional string msg = 4;
    optional int64 matchId = 5;
    optional int32 matchType = 6;
    optional int32 ret = 7; //错误码 1-豆不足
}

//俱乐部比赛报名,cmd522
message ClubMatchEnrollProto {
    required int32 clubId = 1;
    optional int64 matchId = 2;
    optional int32 category = 3; // 1报名 2取消
}

//俱乐部比赛报名或退赛结果返回,cmd522
message ClubMatchEnrollOrExitResultResponse {
    required int32 clubId = 1;
    optional int64 matchId = 2;
    optional int32 category = 3; // 1报名 2取消
    optional bool isSuccess = 4;
    optional string msg = 5;
}

//亲友圈自建赛管理员设置参赛玩家,cmd524
message ClubMatchSetAttendMemberProto {
    optional int32 clubId = 1;
    optional int64 matchId = 2;
    repeated int64 accounts = 3; //参赛成员列表
}

//亲友圈设置参赛成员结果返回,cmd524
message ClubMatchSetAttendResultResponse {
    optional int32 clubId = 1;
    optional int64 matchId = 2;
    optional bool isSuccess = 3;
    optional string msg = 4;
}

//亲友圈自建赛设置参赛成员数据请求,cmd525
message ClubMatchSetAttendListReq {
    optional int32 clubId = 1;
    optional int64 matchId = 2;
}

//亲友圈自建赛管理员设置参赛玩家列表,cmd523
message ClubMatchSetAttendMemberResponse {
    optional int32 clubId = 1;
    optional int64 matchId = 2;
    repeated int64 accounts = 3; //参赛成员列表
}

//邀请参赛
message ClubInviteMatchProto {
    repeated int64 accountIds = 1; // 如果为空表示全员
}

// 亲友圈自建赛排行数据请求,cmd529
message ClubMatchRankDataReq {
    optional int32 clubId = 1;
    optional int64 matchId = 2;
}

//亲友圈自建赛排行数据返回,cmd527
message ClubMatchRankProto {
    required int32 clubId = 1;
    optional int64 matchId = 2;
    repeated CommonRankInfoProto rankList = 3;
}

// 俱乐部后台开关状态返回,cmd518
message ClubBanSwitchResponse {
    optional bool closeChat = 1;
    optional bool closeBulletin = 2;
    optional bool closeMarquee = 3;
    optional bool defendCheating = 4;
}

//亲友圈自建赛推送,cmd520
message ClubMatchEventNotify {
    required int32 clubId = 1;
    optional int64 matchId = 2;
    optional int64 operatorId = 3;
    optional int32 eventCode = 4; //1创建2删除3自主参赛4退赛5设置参赛成员6开赛失败
    optional string matchName = 5;
    optional bool targetIsManager = 6; //目标玩家是否是管理员
    optional int32 startTime = 7; //开赛时间
    optional string clubName = 8; //亲友圈名称
    optional string operatorName = 9; //操作者名称
}

//请求亲友圈自建赛信息,cmd523
message ClubMatchInfoReqProto {
    required int32 clubId = 1;
    repeated int64 matchIds = 2; //传比赛id获取对应的比赛信息，不填请求全部活动
}

//俱乐部比赛数据返回,cmd519
message ClubMatchGroup {
    required int32 clubId = 1;
    repeated ClubMatchInfoProto matchList = 2;
    optional int32 category = 3; // 1客户端请求的自建赛 2亲友圈所有自建赛
}

// 亲友圈自建赛桌子数据返回
message ClubMatchTableInfoResponse {
    optional int32 tablePlayerNum = 1; // 桌子人数
    optional int32 tableCost = 2; //桌子扣豆数
    optional int32 orignalTalbleCost = 3; //建赛时的单桌扣豆数(修改比赛时需要)
}

// 亲友圈清除玩家限制局数,cmd527
message ClubClearPlayerLimitRoundReq {
    optional int32 clubId = 1;
    optional int32 ruleId = 2;
    optional int64 targetId = 3;
}

// 亲友圈将开赛比赛列表返回,cmd526
message ClubMatchWillStartListResponse {
    repeated ClubMatchInfoProto matchs = 1; //在开赛前十分钟内的比赛
}

// 亲友圈比赛记录数据请求,cmd530
message ClubMatchRecordReq {
    optional int32 clubId = 1;
    optional int64 targetId = 2; //管理员查自己比赛记录时传此字段
}

// 亲友圈比赛记录数据返回,cmd528
message ClubMatchRecordResponse {
    optional int32 clubId = 1;
    repeated ClubMatchRecordInfo recordList = 2;
}

message ClubMatchRecordInfo {
    optional int64 matchId = 1;
    optional int32 clubId = 2;
    optional string matchName = 3;
    optional int32 matchType = 4;
    optional int32 startDate = 5;
    optional int32 endDate = 6;
    repeated CommonII rewards = 7;
    repeated CommonRankInfoProto rankList = 8;
    optional string gameName = 9;
    optional string subName = 10;
}

// 亲友圈比赛结束通知,cmd529
message ClubMatchGameEndNotify {
    optional int32 clubId = 1;
    optional int64 matchId = 2;
    optional int64 accountId = 3;
    repeated CommonII rewards = 4;
    repeated CommonRankInfoProto rankList = 5;
    optional string gameName = 6;
    optional string matchName = 7;
}

// 自建赛数据
message ClubDataProto {
    optional int32 match_create_count = 1; // 自建赛建赛数
    optional int32 match_end_count = 2; // 自建赛成赛数
    optional int64 match_exclusive_gold = 3; //自建赛消耗专属豆
    optional int64 match_gold = 4; // 自建赛消耗闲逸豆数
    repeated ClubDailyMatchDataProto matchDailys = 5;
}

// 自建赛每日数据
message ClubDailyMatchDataProto {
    optional int64 create_time = 1;
    optional int32 match_create_num = 2; // 自建赛建赛数
    optional int32 match_end_num = 3; // 自建赛成赛数
    optional int64 match_exclusive_gold = 4; //自建赛消耗专属豆
    optional int64 match_gold = 5; // 自建赛消耗闲逸豆数
}

//自建赛积分数据
message ClubMatchScoreProto {
    repeated ScoreProto scores = 1;
}

message ScoreProto {
    optional int64 accountId = 1;
    optional int32 score = 2;
    optional bool isDisband = 3;
    optional bool isEnd = 4;
}

// 俱乐部包间记录请求,cmd531
message ClubRuleRecordRequestProto {
    optional int32 clubId = 1;
    repeated int32 ruleId = 2;
    optional int32 requestType = 3; //请求类型 1-今天 2-昨天 3-前天 4-第四天 5-第五天 6-第六天 7-第七天 21-八天 31-全部
}

// 俱乐部包间记录返回,cmd530
message ClubRuleRecordResponse {
    optional int32 clubId = 1;
    optional int32 requestType = 2; //请求类型 1-今天 2-昨天 3-前天 4-第四天 5-第五天 6-第六天 7-第七天 21-八天 31-全部
    repeated ClubRuleRecordProto ruleRecord = 3;
    optional int64 accountId = 4;
}

message ClubRuleRecordProto {
    optional int32 ruleId = 1;
    optional int32 gameCount = 2;
    optional int64 exclusiveGold = 3;
    optional int64 gold = 4;
    optional int32 welfareLotteryCount = 5;
    optional int32 bigWinCount = 6;
}

// 玩家正在进行的自建赛房间通知,cmd531
message PlayerOngoingClubMatchRoomNotify {
    optional int32 roomId = 1;
    optional string clubName = 2;
    optional string matchName = 3;
}

// 亲友圈桌子在房间内解散返回,cmd532
message ClubTableDisbandInRoomResponse {
    optional int32 clubId = 1;
    optional bool onlyManager = 2; //是否开启了仅管理员可解散
    optional bool isManager = 3; //是否是管理员身份
    optional int32 ret = 4; //错误码 1-俱乐部不存在 2-包间不存在 3-桌子信息不存在或桌子roomId为0或桌子中已没有自己
}

// 玩家进入亲友圈自建赛房间请求,cmd533
message ClubMatchEnterRoomRequestProto {
    optional int32 clubId = 1;
    optional int64 matchId = 2;
}

// 玩家进入亲友圈自建赛房间返回,cmd533
message ClubMatchEnterRoomResponse {
    optional int32 ret = 1; //错误码 1-可进入房间 2-该比赛已结束 3-您已经在其他房间中,无法进入 4-您该场自建赛已打完
    optional string msg = 2;
}

//身份操作(批量)
message ClubIdentityUpdateBatchProto {
    required int32 clubId = 1;
    repeated MemberIdentity memberIdentity = 2;
}

message MemberIdentity {
    optional int64 accountId = 1;
    optional int32 identity = 2; //新身份
}

// 亲友圈添加/解除合伙人
message ClubPartnerCommonResponse {
    optional int64 accountId = 1;
    optional string accountName = 2;
    optional string clubName = 3;
    optional int32 memberCount = 4;
    optional int32 clubId = 5;
    optional int32 type = 6; //1-队长 2-小队长 3-小组长
}

// 亲友圈同意添加/解除合伙人 添加/移除合伙人子成员
message ClubPartnerCommonResultResponse {
    optional int64 accountId = 1;
    optional int32 ret = 2;
    optional string msg = 3;
    optional int32 clubId = 4;
    optional int64 parentId = 5;
}

message ClubPartnerCommon {
    optional int32 clubId = 1;
    optional int64 partnerId = 2;
    optional int64 targetId = 3; // 被操作玩家Id
    optional string targetName = 4;
    optional string targetAvatar = 5;
}

message ClubPartnerInviteJoinClubRequest {
    optional int32 clubId = 1;
    repeated int64 targets = 2;
}

// 亲友圈合伙人邀请玩家
message ClubPartnerInviteJoinProto {
    optional int32 clubId = 1;
    optional int64 creatorId = 2;
    optional string creatorName = 3;
    optional string clubName = 4;
    optional int32 memberCount = 5;
    optional int64 operatorId = 6;
    optional string operatorName = 7;
    optional string operatorAvator = 8;
}

message ClubMatchCommon {
    optional int32 clubId = 1;
    optional int64 matchId = 2;
    optional bool isBan = 3; //是否关闭入口
    optional bool isSuccess = 4; //操作结果
}

message ClubMatchManagerCancelEnrollProto {
    optional int32 clubId = 1;
    optional int64 matchId = 2;
    optional int64 targetId = 3;
    optional bool isBan = 4; //是否禁止参赛
    optional bool isSuccess = 5; //操作结果
}

message ClubMatchManagerCancelEnrollResponse {
    optional int64 targetId = 1;
    optional string clubName = 2;
    optional string matchName = 3;
    optional int32 clubId = 4;
    optional int64 matchId = 5;
}

//亲友圈牌桌牌局id请求
message ClubTableBrandIdProto {
    optional int32 clubId = 1;
    optional int32 ruleId = 2;
    optional int32 tableIndex = 3; //桌子索引
    optional string brandId = 4; //牌局Id
}

// 自建赛桌子信息返回,cmd548
message ClubMatchTablesResponse {
    optional int32 clubId = 1;
    optional int64 matchId = 2;
    optional int32 gameRound = 3;
    repeated ClubMatchTableInfoProto tables = 4;
}

message ClubMatchTableInfoProto {
    optional int32 roomId = 1;
    optional int32 curRound = 2;
    repeated playerInfoProto players = 3;
    optional bool isEnd = 4;
}

message playerInfoProto {
    optional int64 playerId = 1;
    optional string nickname = 2;
}

// 自建赛管理员解散桌子
message ClubMatchTableDisbandProto {
    optional int32 clubId = 1;
    optional int64 matchId = 2;
    optional int32 roomId = 3;
    optional bool isSuccess = 4;
}

// 亲友圈事件,cmd550
message ClubEventProto {
    optional int32 clubId = 1;
    optional int32 eventCode = 2; // 1-切换包间模式 2-玩家亲友圈福卡数量变化 3-疲劳值高级设置开关状态变化 6-功能开关状态变化
    repeated CommonII switchs = 3; // 亲友圈设置开关
    repeated int32 ruleIds = 4;
    optional bool isEntranceOpen = 5; // 点赞消耗疲劳值入口
    optional int32 param1 = 6; //通用参数(eventCode=6时 1-点赞疲劳值开关 2-合伙人福卡开关 3-合伙人疲劳值开关 4-排行榜开关)
    optional int64 operatorId = 7; //操作者ID
    optional string param2 = 8; //通用参数
    optional int32 param3 = 9;
    optional int32 param4 = 10;
    optional double param5 = 11;
    repeated CommonIS commonIS = 12;
}

// 亲友圈福卡数据返回,cmd551
message ClubWelfareInfoResponse {
    optional int32 clubId = 1;
    optional int64 totalClubWelfare = 2; //亲友圈总福卡数
    optional int64 selfClubWelfare = 3; // 玩家自己的福卡数
    optional int32 canGetValue = 4; // 福卡数少于该值可领取
    optional int64 newFuCard = 5; //亲友圈新福卡数
}

// 亲友圈福卡领取返回,cmd552
message ClubWelfareGetResponse {
    optional int32 clubId = 1;
    optional int32 ret = 2; //0-领取成功 1-没有达到领取条件 2-没有绑定手机号
    optional string msg = 3;
}

// 亲友圈修改玩家福卡请求,cmd554
message ClubModifyPlayerWelfareReq {
    optional int32 clubId = 1;
    repeated int64 targets = 2; // 被操作玩家
    optional int64 welfareValue = 3; //修改后的值
    optional int32 welfareChangeValue = 4; //变动值
    optional int32 opType = 5; //操作类型 1-单个修改 2-批量修改
}

// 亲友圈修改玩家福卡返回,cmd553
message ClubModifyPlayerWelfareResponse {
    optional int32 clubId = 1;
    optional int32 ret = 2; //0-修改成功 1-亲友圈福卡数量不足
    optional string msg = 3;
    optional int64 welfareValue = 4; //修改的值
    repeated int64 targets = 5; // 被操作玩家
    repeated PlayerClubWelfareProto playerClubWelfares = 6;
}

message PlayerClubWelfareProto {
    optional int64 accountId = 1;
    optional int64 clubWelfare = 2;
}

// 亲友圈福卡抽奖返回,cmd554
message ClubWelfareLotteryResponse {
    optional int32 clubId = 1;
    repeated ClubWelfareRewardProto rewards = 2;
    optional int64 playerClubWelfare = 3; //玩家福卡数
    optional int32 costClubWelfare = 4; //消耗福卡数
    optional int32 lotteryType = 5; //抽奖类型 1-福卡抽奖 2-疲劳值抽奖
    optional int32 cost = 6; // 消耗疲劳值
}

message ClubWelfareRewardProto {
    optional int32 id = 1;
    optional int32 rewardNum = 2;
    optional int32 itemId = 3;
    optional string itemName = 4;
    optional string rewardIcon = 5;
    optional string rewardDesc = 6;
    optional bool isRealReward = 7; //是否真实奖励
}

// 亲友圈福卡抽奖记录返回,cmd555
message ClubWelfareLotteryMsgResponse {
    optional int32 clubId = 1;
    repeated LotteryMsgProto msg = 2;
    repeated WelfareChangeProto modifyMsg = 3;
    optional int32 type = 4; //0-抽奖 1-修改
}

message LotteryMsgProto {
    optional int32 recordTime = 1;
    optional int64 accountId = 2;
    optional string nickname = 3;
    optional string subName = 4;
    optional int32 cost = 5;
}

// 亲友圈大赢家抽奖通知,cmd556
message ClubWelfareLotteryNotify {
    optional int64 accountId = 1;
    optional int64 playerClubWelfare = 2;
    optional int32 costClubWelfare = 3;
}

// 亲友圈玩家福卡变动记录返回,cmd557
message ClubMemberWelfareChangeLogResponse {
    optional int64 accountId = 1;
    optional int32 clubId = 2;
    repeated WelfareChangeProto log = 3;
}

message WelfareChangeProto {
    optional int32 type = 1; //1-福卡抽奖 2-福卡修改
    optional int32 costNum = 2;
    optional string subName = 3;
    optional int64 operatorId = 4;
    optional string operatorName = 5;
    optional int64 oldValue = 6;
    optional int64 newValue = 7;
    optional int32 recordTime = 8;
    optional int64 relateAccountId = 9;//被关联修改的成员(target是合伙人时对应实际被修改福卡的玩家,target是实际被修改福卡的玩家时对应该玩家的合伙人)
    optional string relateAccountName = 10;
    optional int64 relateOldValue = 11;
    optional int64 relateNewValue = 12;
    optional bool belongToPartner = 13; // 属于合伙人的关联修改记录,客户端展示的时候需要调换下target和relate
    optional int64 targetId = 14;
    optional string targetName = 15;
}

// 亲友圈区域保护游戏权限返回,cmd558
message ClubAreaProtectResultResponse {
    optional int32 clubId = 1;
    optional int64 accountId = 2;
    optional int32 ret = 3; // 1-需要申请 2-已申请 3-需要是代理 4-需要绑定子游戏 5-已申请绑定子游戏
    optional string areaMobile = 4; // 区域负责人手机号
    optional int64 diamondPromoterId = 5; //钻石推广员Id
    optional int32 gameExpireDay = 6; //创建游戏有效期
}

// 亲友圈区域保护游戏权限申请,cmd556
message ClubAreaProtectPermissionApplyReq {
    optional int32 clubId = 1;
    optional int64 accountId = 2;
    optional int32 gameId = 3;
    optional string gameName = 4;
    optional int32 gameTypeIndex = 5;
    optional string phone = 6;
    optional string name = 7;
    optional string phoneIdentityCode = 8;
    optional int64 diamondPromoterId = 9;  //钻石推广员Id
}

// 亲友圈玩家信息请求,cmd557
message ClubMemberInfoReq {
    optional int32 clubId = 1;
    repeated int64 accountList = 2;
    optional int32 type = 3;//默认-成员全部信息 1-冲榜分和奖券
}

// 亲友圈玩家信息返回,cmd559
message ClubMemberInfoResponse {
    optional int32 clubId = 1;
    repeated ClubAccountProto memberList = 2;
    optional int32 type = 3;//1-成员全部信息 2-冲榜分和奖券
}

// 亲友圈创建人是否是代理返回,cmd560
message ClubOwnerIsAgentResponse {
    optional int32 clubId = 1;
    optional bool isAgent = 2;
}

// 亲友圈添加成员通知,cmd561
message ClubAddMemberNotify {
    optional int32 clubId = 1;
    optional string operatorName = 2;
    optional string clubName = 3;
}

// 亲友圈合伙人邀请成员加入结果返回,cmd562
message ClubPartnerInviteJoinResultResponse {
    optional int32 clubId = 1;
    repeated int64 targetIds = 2; //邀请成功的玩家列表
    repeated int32 rets = 3; //错误码 0-成功 1-亲友圈人数已满，部分成员未邀请成功 2-部分成员加入亲友圈数量已达上限，对应的成员邀请失败 3-已经在亲友圈
}

// 亲友圈多包间模式同玩法闲置桌子数设置通知,cmd563
message ClubMultiRuleSetTableNumNotify {
    optional int32 clubId = 1;
    optional int32 num = 2;
}

// 亲友圈玩家疲劳值变化通知(牌局结束时),cmd564
message ClubMemberTireValueChangeNotify {
    optional int32 clubId = 1;
    repeated MemberTireProto memberTire = 2;
}

message MemberTireProto {
    optional int64 accountId = 1;
    optional int32 tireValue = 2;
}

// 亲友圈设置玩家点赞数操作日志返回,cmd565
message ClubSetMemberLikeNumMsgResponse {
    optional int32 clubId = 1;
    repeated ClubSetMemberLikeNumMsgProto msgs = 2;
}

message ClubSetMemberLikeNumMsgProto {
    optional int64 operatorId = 1; //操作者id
    optional string operatorName = 2; //操作者名字
    optional int64 targetId = 3; //被修改玩家Id
    optional string targetName = 4; //被修改玩家名字
    optional int32 oldValue = 5; //旧值
    optional int32 newValue = 6; //新值
    optional int32 opeTime = 7; //操作时间
    optional int32 recordTime = 8; //记录时间
}

// 亲友圈权限返回,cmd566
message ClubPrivilegeResponse {
    optional int32 clubId = 1;
    repeated CommonII managerSetStatus = 2; //管理员权限
    repeated CommonII partnerSetStatus = 3; //合伙人权限
    repeated CommonII personalSetStatus = 4; //个人权限
    optional int64 targetAccountId = 5; //修改个人权限返回时带上
    optional int32 targetIdentity = 6; // 目标者身份
}

// 亲友圈权限修改,cmd562
message ClubPrivilegeModifyReq {
    optional int32 clubId = 1;
    repeated ClubPrivilegeProto privileges = 2;
    optional int64 targetAccountId = 3;
}

message ClubPrivilegeProto {
    optional int32 type = 1; // 1-管理员 2-合伙人 3-个人权限
    optional CommonII set = 2;
}

// 亲友圈GPS开关状态,请求cmd563,返回cmd567
message ClubGpsSwiftStatusProto {
    optional int32 roomId = 1;
    optional bool needCheck = 2; // 是否需要检查GPS
    optional ClubInfoProto clubInfo = 3;
    optional int32 clubId = 4; //服务器使用
    optional int32 ruleId = 5;
    optional bool onlyAllowFastJoin = 6;
}

message ClubInfoProto {
    optional int32 clubId = 1;
    optional string clubName = 2;
    optional string ownerName = 3;
}

// 亲友圈玩家牌局积分疲劳值记录返回,cmd568
message ClubMemberGameTireMsgResponse {
    optional int32 clubId = 1;
    optional int64 accountId = 2;
    repeated ClubMemberGameTireMsgProto msgs = 3;
}

message ClubMemberGameTireMsgProto {
    optional int64 accountId = 1;
    optional string nickname = 2;
    optional string gameName = 3;
    optional int32 score = 4;
    optional int32 tire = 5;
    optional int32 recordTime = 6;
}

// 俱乐部成员疲劳值消息返回,cmd571
message ClubMemberTireMsgResponse {
    optional int32 clubId = 1;
    optional int64 accountId = 2;
    repeated ClubModifyTireMsgProto msgs = 3;
    optional int32 curPage = 4;
    optional int32 totalPage = 5;
    optional int32 totalSize = 6;
    optional int32 type = 7; //1-玩家 2-队长 3-小队长
}

//续桌
message ClubContinuGameProto {
    optional int32 tableImageId = 1;
    optional int32 status = 2; //1同意  2拒绝
}

//状态
message ClubContinuGameRspProto {
    required int32 tableImageId = 1;
    repeated CommonLI status = 2; //k:accountId,v:1同意 2拒绝
    optional int32 errorCode = 3; //0异常,1正常
    optional string tip = 4; // errorCode==1,弹出该提示
}

// 亲友圈包间额外设置返回,cmd572
message ClubRuleExtraSetRsp {
    optional int32 clubId = 1;
    repeated RuleExtraSetProto extraSet = 2;
}

message RuleExtraSetProto {
    optional int32 ruleId = 1;
    repeated CommonCost commonCost = 2; //大赢家扣除
    optional int32 selectType = 3; //1-大赢家 2-所有人
    optional int32 allPeopleCost = 4; //所有人扣除
}

message CommonCost {
    optional int32 minValue = 1;
    optional int32 maxValue = 2;
    optional int32 cost = 3;
}

message NewCommonCost {
    optional double minValue = 1;
    optional double maxValue = 2;
    optional double cost = 3;
}

// 亲友圈包间额外设置更新,cmd569
message ClubRuleExtraSettingUpdateProto {
    optional int32 clubId = 1;
    repeated RuleExtraSetProto extraSet = 2;
}

// 点赞消耗疲劳值扣除数返回,cmd573
message ClubUpvoteCostTireRsp {
    optional string brandId = 1;
    optional int32 ret = 2;// -1 权限不足 -2 战绩不存在 0-不弹扣除疲劳值窗,直接点赞 1-弹扣除疲劳值窗
    optional int32 costValue = 3;
}

// 禁止同桌限制组操作,cmd571,cmd574
message ClubDeskmateGroupOptProto{
    optional int32 clubId = 1;
    optional int64 groupId = 2; //组id,创建时不需要带过来
    optional int64 memberId = 3;
    optional int32 optCode = 4; //1创建分组 2删除分组 3添加组员 4删除组员 5-请求所有限制组数据 6设置组名称
    optional int32 resultCode = 5; //0-操作成功
    optional string gpName = 6; //组名称
}

// 禁止同桌限制组数据返回,cmd575
message ClubDeskmateGroupDataProto {
    optional int32 clubId = 1;
    repeated ClubDeskmateGroupProto group = 2;
}

message ClubDeskmateGroupProto {
    optional int64 groupId = 1; //组id
    repeated int64 memberIds = 2; //组成员
    optional string gpName = 3; //组名称
}

// 玩家是否在某亲友圈中,cmd576
message ClubIsPlayerInRsp {
    optional int32 clubId = 1;
    optional bool isIn = 2; // 是否在亲友圈中
}

// 亲友圈新抽奖数据返回,cmd577,亲友圈新抽奖数据设置请求,cmd574
message ClubNewLotteryDataProto {
    optional int32 clubId = 1;
    optional int32 type = 2; //1-抽奖设置 2-赠送设置
    optional int32 costTire = 3;
    optional int32 costNewFuCard = 4;
    repeated RuleExtraSetProto extraSet = 5;
    optional int32 autoLotteryTime = 6; //自动抽奖时间 0-关闭自动抽奖
}

// 亲友圈新抽奖请求,cmd575
message ClubNewLotteryReq {
    optional int32 clubId = 1;
    optional int32 requestType = 2; //请求类型 1-今天 2-昨天 3-前天 4-第四天 5-第五天 6-第六天 7-第七天 21-八天 31-全部
    repeated int64 accountIds = 3;
    optional int32 lotteryType = 4; //摇奖类型 1-全部摇奖 2-单个玩家摇奖
    optional int32 totalLotteryType = 5; //全部摇奖的摇奖次数类型 1-摇一次 2-玩家拥有奖券支持的最大摇奖次数
    optional int32 singleLotteryNum = 6; //单个玩家摇奖的摇奖次数
}

// 亲友圈新抽奖返回,cmd578
message ClubNewLotteryRsp {
    optional int32 clubId = 1;
    optional int32 requestType = 2; //请求类型 1-今天 2-昨天 3-前天 4-第四天 5-第五天 6-第六天 7-第七天 21-八天 31-全部
    repeated PlayerNewLotteryProto players = 3;
}

message PlayerNewLotteryProto {
    optional int64 accountId = 1;
    optional int32 tireValue = 2;
    optional int64 newFuCardValue = 3; //奖券数量
    optional int32 memberNewFuCardCost = 4; //奖券消耗数
}

// 亲友圈玩家新福卡变动记录返回,cmd580
message ClubMemNewFuCardChangeLogRsp {
    optional int32 clubId = 1;
    optional int64 accountId = 2; //被操作人
    repeated NewFuCardChangeProto fuCardLogProto = 3;
}

message NewFuCardChangeProto {
    optional int32 createTime = 1; //日志时间
    optional int32 type = 2; //1-牌局获得 2-抽奖消耗
    optional int32 fuCardChangeNum = 3; //新福卡变动值(获得为正数，消耗为负数)
    optional int32 tireChangeNum = 4; //疲劳值变动值(获得为正数，消耗为负数)
    optional string subName = 5; //子游戏名称
    optional int64 targetId = 6;
    optional string targetName = 7; //被操作人名称
    optional int64 operatorId = 8;
    optional string operatorName = 9; //操作人名称
    optional int32 recordTime = 10; //抽奖时操作的玩家哪一天的记录
    optional string itemName = 11; //奖励物品名称
    optional int32 itemNum = 12; //奖励物品数量
    optional int32 lotteryNum = 13; //抽奖次数
}


message ClubSetRankRewardProto{
    optional int32 clubId = 1;
    optional string reward = 2; //俱乐部排行榜名次奖励，格式:排名:财富类型1:数量|排名:财富类型2:数量|...（财富类型参考ClubEventLogModel）1房卡2金币
    optional int32 type = 3; //1-战队月奖励 2-小队月奖励 3-小组月奖励
}

//上报,cmd581
message ClubReportRankScoreProto{
    optional int32 clubId = 1;
    repeated int64 accountIds = 2; //被操作玩家列表
    optional int32 opType = 3; // 1-自己上报  2-被动上报
    optional int32 reportType = 4; // 1-上报 2-终止比赛 3-异常处罚
    optional double subValue = 5; //异常处罚扣除值
}

//赞取消赞
message ClubLaudRankProto{
    optional int32 clubId = 1 ;
    optional int64 targetAccountId = 2; //目标玩家
    optional bool laud = 3;//true赞
    optional int32 day = 4; //哪天 1-今天 2-昨天 3-前天 4-第四天 5-第五天
    optional int32 laudCount = 5; //赞赏数
}

// 俱乐部排行榜成员记录请求,cmd579
message ClubMemberRankRecordRequestProto {
    optional int32 clubId = 1;
    optional int32 requestType = 2; //请求类型 1-今天 2-昨天 3-前天 4-第四天 5-第五天
    optional int64 accountId = 3; //请求单个玩家的记录
    optional int32 tabIndex = 4; //标签 1排行榜信息 2排行榜管理 3战队排名 4小队排名
    optional bool isCurMonth = 5; // 是否当月
}

// 俱乐部排行榜成员记录返回,cmd582
message ClubMemberRankRecordRsp {
    optional int32 clubId = 1;
    optional int32 requestType = 2; //请求类型 1-今天 2-昨天 3-前天 4-第四天 5-第五天
    repeated ClubMemberRankRecord record = 3; //玩家记录
    optional int32 tabIndex = 4; //标签 1排行榜信息 2排行榜管理 3战队排名
    repeated ClubTeamRankProto teamRank = 5; //战队排名
    optional bool isCurMonth = 6; //是否当月
    optional string teamRankReward = 7; //队伍排名奖励
}

message ClubMemberRankRecord {
    optional int64 accountId = 1;
    optional double maxScore = 2; //最高分
    optional int32 initScore = 3; //初始分
    optional int32 initTime = 4; //初始时间
    optional int32 reportScore = 5; //上报分
    optional int32 reportTime = 6; //上报时间
    optional bool admireStatus = 7; //赞赏状态
    optional int32 admireCount = 8; //赞赏数
    optional int32 bigWinCount = 9; //当日大赢家数
    optional string nickname = 10; //玩家昵称
    optional int32  clubHonourLevel = 11; //荣誉等级
    optional string rankReward = 12; //排名奖励，历史排名中有值
    optional double curScore = 13; //当前冲榜分
    optional double accuInitScore = 14; //当日总初始分
    optional double accuReportScore = 15; //当日总上报分
    optional double accuConsumeScore = 16; //当日抽奖兑换分
    optional int32 gameCount = 17;//当日游戏局数
    optional bool teamAdmireStatus = 18;
    optional int32 teamFlowersNum = 19;
    optional double teamCurMedal = 20; // 战队当日勋章
    optional int32 teamAccuMedal = 21; // 战队月总勋章
    optional double score = 22; // 分数
}

message ClubTeamRankProto {
    optional int64 accountId = 1;
    optional string nickname = 2;
    optional int32  childNum = 3; //下属成员数量
    optional int32  accuTeamMedal = 4; // 战队/小队长月累计勋章值
    optional double curTeamMedal = 5; //战队/小队长当前勋章值
    optional string teamRankReward = 6; //战队月排名奖励
    optional double partnerRankScore = 7; //队长/小队长冲榜分
    optional double teamTotalMedal = 8; //队伍总勋章
}

//初始化冲榜分申请记录
message ClubRankInitScoreApplyProto{

    repeated ApplyEntryProto applyMsg = 1;
    optional int32 clubId = 2;

    message ApplyEntryProto{
        optional int64 accountId = 1; //申请者ID
        optional int32 applyTime = 2; //申请时间
        optional int32 score = 3; //申请分数
        optional string nickName = 4; //申请者昵称
        optional int32 identity = 5; //1创始人 2管理员 3队长 4队员 0普通成员
        optional double newScore = 6; //申请分数
    }
}


//申请处理
message ClubRankOptApplyScoreProto{
    optional int32 clubId = 1;
    repeated int64 accountIds = 2;
    optional int32 status = 3; //1同意 2拒绝
    optional double newInitScore = 4; //修改申请值,如果有修改才需要赋值
    optional int32 setType = 5; //1-同意申请 2-指派 3-异常补偿
}

//成员冲榜分信息,cmd587
message ClubMemberRankScoreInfoProto {
    optional int32 clubId = 1;
    optional double curRankScore = 2; //当前冲榜分
    optional bool isRequestInitScore = 3;//是否申请过初始积分
    optional int32 clubHonour = 4; //亲友圈荣誉值
    optional int32 clubHonourLevel = 5; //荣誉等级
    optional string reward = 6; //排名奖励
    optional double initScore = 7; //初始分奖励分
    optional int32 initScoreApplyTime = 8; //初始分申请时间(单位秒)
    optional int32 rankNum = 9; //排名表数量，0全部
    optional string monthReward = 10; //战队月奖励
    optional int32 clubCurMonthMedal = 11; //亲友圈当月勋章
    optional double clubMedal = 12; //亲友圈当前勋章
    optional string secondTeamMonthReward = 13; //小队月奖励
    optional string thirdTeamMonthReward = 14; //小组月奖励
    optional string fourthTeamMonthReward = 15; //四级队伍月奖励
    optional string fifthTeamMonthReward = 16;//五级队伍月奖励
}

//请求俱乐部初始分列表
message ClubRankInitScoreOptProto{
    optional int32 clubId = 1;
    optional int32 type = 2; //0列表1新增2删除
    repeated double initScore = 3;
    optional int64 operatorId = 4; //通知给管理员时带上操作者ID
    repeated double sysInitScore = 5; //系统初始分
}

// 亲友圈排行榜翻牌通知,cmd588
message ClubRankLotteryNotify {
    optional int64 accountId = 1;
    optional double curRankScore = 2; //当前冲榜分
    optional int32 curClubHonur = 3; //当前荣誉值
    optional double costRankScore = 4; //消耗的冲榜分
    optional int32 clubHonourLevel = 5; //荣誉等级
}

// 亲友圈排行榜翻牌返回,cmd591
message ClubRankLotteryResponse {
    optional int32 clubId = 1;
    optional int32 type = 2; //类型 1-抽奖 2-兑换
    repeated ClubWelfareRewardProto rewards = 3;
    optional int32 curClubHonur = 4; //当前荣誉值
}

//亲友圈上报成绩返回,cmd584
message ClubReportRankScoreRsp {
    optional int32 clubId = 1;
    repeated ClubMemberRankRecord memberRecord = 2;
}

//冲榜分变动记录返回,cmd593
message ClubMemberRankScoreChangeLogRsp {
    optional int32 clubId = 1;
    optional int32 curPage = 2;
    optional int32 totalPage = 3;
    optional int32 totalSize = 4;
    optional int32 type = 5; //冲榜分变动日志时 1-玩家的日志 2-玩家上报日志 3-亲友圈的日志
    optional int64 target = 6; //目标玩家Id 0时代表查亲友圈的
    repeated ClubMemberRankScoreChangeLogProto changeLogProto = 7;
    optional int32 isPartner = 8; //1-队长 2-小队长
}

message ClubMemberRankScoreChangeLogProto {
    optional int64 accountId = 1;
    optional string accountName = 2;
    optional int32 type = 3;//1-牌局结算 2-抽奖 3-兑换荣誉 4-自己上报 5-管理员上报 6-退出自动上报 7-申请获得 8-负分自动上报 9-解绑下属成员自动上报 10-指派出赛 11-提升战队等级
    //12-牌局贡献分配 13-提升亲友圈等级 14-提升小队等级 15-战队贡献分配设置 16-小队贡献分配设置
    optional double oldValue = 4;
    optional double newValue = 5;
    optional string subName = 6;
    optional int64 operatorId = 7;
    optional string operatorName = 8;
    optional int32 recordTime = 9;
    optional string uniqueIdStr = 10;//记录的唯一id
    optional bool   isAdmire = 11; //是否赞赏
    optional int64 relateId = 12; //关联修改玩家Id
    optional string relateName = 13; //关联玩家昵称
    optional bool isBelongPartner = 14; //是否是合伙人被关联修改的
    optional int32 flowersNum = 15; //送花数量
    optional double oldTeamMedal = 16; //战队勋章旧值
    optional double newTeamMedal = 17; //战队勋章新值
    optional int32 dayTime = 18; // 操作的哪一天的数据
    optional int32 allotRate = 19;//战队小队贡献分配比例
    optional double clubGetMedal = 20; //亲友圈勋章
    repeated string teamGetMedalList = 21; //战队小队勋章(格式 队长id:队长昵称:勋章值| 小队长1id:小队长1昵称:勋章值,小队长2id:小队长2昵称:勋章值...)
    optional double relateOldValue = 22;
    optional double relateNewValue = 23;
    optional int64 teamPartnerId = 24; //被操作玩家的战队小队长Id
    repeated string thirdTeamGetMedalList = 25; //小组勋章(格式 队长id|小队长id|小组长1id:小组长1昵称:勋章值)
    optional int32 rewardCoin = 26;
    optional double rewardRankScore = 27;
    optional int32 medalType = 28; // 勋章类型 1-战队勋章 2-小队勋章 3-小组勋章
    optional double gameScore = 29; //牌局分
    optional int64 teamId = 30; //获得勋章的队伍Id
    optional string teamName = 31;//获得勋章的队伍名字
    repeated string fourthTeamGetMedalList = 32; //四级队伍勋章(格式 队长id|小队长id|小组长id|四级队长id:四级队长昵称:勋章值)
    repeated string fifthTeamGetMedalList = 33; //五级队伍勋章(格式 队长id|小队长id|小组长id|四级队长id|五级队长id:五级队长昵称:勋章值)
}

//亲友圈申请冲榜分操作记录返回,cmd594
message ClubMemberRankScoreApplyOperateLogRsp {
    optional int32 clubId = 1;
    optional int32 curPage = 2;
    optional int32 totalPage = 3;
    optional int32 totalSize = 4;
    repeated ClubMemberRankScoreApplyOperateLogProto logProto = 5;
}

message ClubMemberRankScoreApplyOperateLogProto {
    optional int64 accountId = 1;
    optional string accountName = 2;
    optional double value = 3;
    optional int64 operatorId = 4;
    optional string operatorName = 5;
    optional int32 recordTime = 6;
}

//亲友圈通用错误码 rsp cmd:CLUB_COMMON_ERROR_RSP = 595
message ClubCommonErrorProto{
   optional int32 clubId = 1;
   optional int32 errorCode = 2;
   optional string tip = 3;
}

message ClubLogCommonProto {
    optional int32 clubId = 1;
    optional int32 pageSize = 2;
    optional int32 curPage = 3;
    optional int32 totalPage = 4;
    optional int32 totalSize = 5;
    optional int32 type = 6; //冲榜分变动日志时 1-玩家的日志 2-玩家上报日志 3-亲友圈的日志 4-合伙人下属成员日志 5-战队记录 6-小队长下属成员日志 7-亲友圈贡献日志
    optional int64 target = 7; //目标玩家Id 0时代表查亲友圈的
    optional int64 beginTime = 8;
    optional int64 endTime = 9;
    optional int32 subType = 10; //1-个人管理 2-个人牌局 3-战队管理 4-战队等级 5-战队贡献
}

// 亲友圈冲榜包间战队数据,cmd597
message ClubRulePartnerRecordProto {
    optional int32 clubId = 1;
    optional int32 requestType = 2;//请求类型 1-今天 2-昨天 3-前天 4-第四天 5-第五天
    optional int32 ruleId = 3;
    repeated MemberStatDataProto memberRecords = 4;
    repeated AllRuleRecordProto ruleRecord = 5;
    optional bool isContainPartner = 6; //是否包含队长统计
}

message MemberStatDataProto {
    optional int64 accountId = 1;
    optional string nickname = 2;
    optional int32 isPartner = 3; //1-队长 2-小队长
    optional int64 parentId = 4;
    repeated AllRuleRecordProto ruleRecord = 5;
    optional int64 teamPartnerId = 6;
    repeated AllRuleAllotRateProto ruleAllotRate = 7;
    optional int64 thirdTeamPartnerId = 8;
    optional int64 fourthTeamPartnerId = 9;
    optional int64 fifthTeamPartnerId = 10;
}

message AllRuleAllotRateProto {
    optional int32 ruleId = 1;
    optional int32 allotRate = 2; //队伍贡献分配比
}

message AllRuleRecordProto {
    optional int32 ruleId = 1;
    optional int32 gameCount = 2;
    optional int32 bigWinCount = 3;
    optional double consumeRankScore = 4;
    optional double teamGetMedal = 5; //战队通过分配获得的勋章
}

// 亲友圈战队点赞送花
message ClubRankTeamAdmireProto {
    optional int32 clubId = 1;
    optional int64 accountId = 2;
    optional int32 opType = 3; //1-点赞 2-送花
    optional int32 day = 4; //1-今天 2-昨天 3-前天 4-第四天 5-第五天
    optional bool admireStatus = 5;
    optional int32 flowersNum = 6; //送花数
}

//俱乐部成员简单信息列表
message ClubMemberSimpleListProto {
    optional int32 clubId = 1;
    repeated ClubMemberSimpleProto memebers = 2; //俱乐部成员
}

// 俱乐部成员简单信息(优化成员列表数据请求使用,只带最基本信息)
message ClubMemberSimpleProto {
    optional int64 account_id = 1; // 玩家Id
    optional int32 isPartner = 2; //  1-合伙人 2-小队合伙人
    optional int64 parentId = 3; //
    optional int64 playerClubWelfare = 4; //玩家亲友圈福卡数量
    optional int64 newFuCard = 5;//奖券数量
    optional int32 identity = 6; //-1黑名单 0普通成员 1管理员 2创始人
    optional double curRankScore = 7;
}

// 亲友圈提升战队等级返回,cmd599
message ClubUpdateTeamRankLevelRsp {
    optional double costMedal = 1; //消耗的勋章数
    optional int32 accuMedal = 2; //总勋章数
    optional int64 partnerId = 3;
    optional int32 clubId = 4;
}

message ClubTeamInfoProto {
    optional int32 clubId = 1;
    optional int64 targetId = 2;
    optional int64 partnerId = 3; //队长Id
    optional string partnerName = 4;  //队长昵称
}

message ClubTeamDataProto {
    optional int32 clubId = 1;
    optional int32 day = 2;
    optional int32 type = 3; // 0-战队成员关系 1-合伙人信息 2-冲榜赛管理信息 3-大联盟管理
    repeated TeamMemberProto teamMemberList = 4; //成员关系
    repeated ClubMemberProto recordDataList = 5; //合伙人界面玩家数据
    repeated ClubMemberRankRecord rankRecordDataList = 6; //冲榜赛界面玩家数据
}

message TeamMemberProto {
    optional int64 accountId = 1;
    optional string nickname = 2;
    optional int32 partnerStatus = 3; // 1-队长 2-小队长 3-小组长
    optional int64 teamPartnerId = 4; // 小队长Id
    optional int64 teamPartnerIndex = 5; //小队编号
    optional int32 identity = 6;
    optional string remark = 7; //备注
    optional string remark_ext = 8; //第二个备注
    optional int64 thirdTeamPartnerId = 9; //小组长Id
    optional int64 thirdTeamPartnerIndex = 10; //小组编号
    optional int64 partnerId = 11; //队长Id
    optional int64 fourthTeamPartnerId = 12; //四级队长Id
    optional int64 fourthTeamPartnerIndex = 13; //四级队长编号
    optional int64 fifthTeamPartnerId = 14; //五级队长Id
    optional int64 fifthTeamPartnerIndex = 15; //五级队长编号
}

message ClubMemberProto {
    optional int64 accountId = 1;
    optional int32 game_time = 2; //牌局数
    optional int32 win_time = 3; //大赢家数
    optional int32 tireValue = 4; //疲劳值
    optional double score = 5; //分数
    optional int32 memberNewFuCardCost = 6; //奖券摇奖消耗数
    optional int64 playerClubWelfare = 7; //福卡
    optional int64 newFuCard = 8; //奖券
    optional int32 clubCard = 9; //亲友卡
    optional int32 isLike = 10; //点心状态 0-否 1-是
    optional int32 likeNum = 11; //点赞数
}

message ClubMultiRuleGroupSetProto {
    optional int32 clubId = 1;
    optional string groupSettings = 2; //index1:ruleId1,ruleIde2...|index2:ruleIde3,ruleId4...|
    optional int32 freeTablePosition = 3;
    optional int32 freeTableNum = 4; //闲置桌数
    optional int32 ruleCategory = 5; //0单包间 1多包间 2混合多包间
    optional int64 operator = 6; //操作者
}